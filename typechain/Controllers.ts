/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export interface ControllersInterface extends utils.Interface {
  functions: {
    "chief(address)": FunctionFragment;
    "connectors(string)": FunctionFragment;
    "instaIndex()": FunctionFragment;
    "toggleChief(address)": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "chief", values: [string]): string;
  encodeFunctionData(functionFragment: "connectors", values: [string]): string;
  encodeFunctionData(
    functionFragment: "instaIndex",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "toggleChief", values: [string]): string;

  decodeFunctionResult(functionFragment: "chief", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "connectors", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "instaIndex", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "toggleChief",
    data: BytesLike
  ): Result;

  events: {
    "LogController(address,bool)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "LogController"): EventFragment;
}

export type LogControllerEvent = TypedEvent<
  [string, boolean],
  { addr: string; isChief: boolean }
>;

export type LogControllerEventFilter = TypedEventFilter<LogControllerEvent>;

export interface Controllers extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ControllersInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    chief(arg0: string, overrides?: CallOverrides): Promise<[boolean]>;

    connectors(arg0: string, overrides?: CallOverrides): Promise<[string]>;

    instaIndex(overrides?: CallOverrides): Promise<[string]>;

    toggleChief(
      _chiefAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  chief(arg0: string, overrides?: CallOverrides): Promise<boolean>;

  connectors(arg0: string, overrides?: CallOverrides): Promise<string>;

  instaIndex(overrides?: CallOverrides): Promise<string>;

  toggleChief(
    _chiefAddress: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    chief(arg0: string, overrides?: CallOverrides): Promise<boolean>;

    connectors(arg0: string, overrides?: CallOverrides): Promise<string>;

    instaIndex(overrides?: CallOverrides): Promise<string>;

    toggleChief(
      _chiefAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "LogController(address,bool)"(
      addr?: string | null,
      isChief?: boolean | null
    ): LogControllerEventFilter;
    LogController(
      addr?: string | null,
      isChief?: boolean | null
    ): LogControllerEventFilter;
  };

  estimateGas: {
    chief(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    connectors(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    instaIndex(overrides?: CallOverrides): Promise<BigNumber>;

    toggleChief(
      _chiefAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    chief(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    connectors(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    instaIndex(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    toggleChief(
      _chiefAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
