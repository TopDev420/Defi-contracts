/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export interface InstaAccountInterface extends utils.Interface {
  functions: {
    "cast(address[],bytes[],address)": FunctionFragment;
    "disable(address)": FunctionFragment;
    "enable(address)": FunctionFragment;
    "instaIndex()": FunctionFragment;
    "isAuth(address)": FunctionFragment;
    "shield()": FunctionFragment;
    "switchShield(bool)": FunctionFragment;
    "version()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "cast",
    values: [string[], BytesLike[], string]
  ): string;
  encodeFunctionData(functionFragment: "disable", values: [string]): string;
  encodeFunctionData(functionFragment: "enable", values: [string]): string;
  encodeFunctionData(
    functionFragment: "instaIndex",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "isAuth", values: [string]): string;
  encodeFunctionData(functionFragment: "shield", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "switchShield",
    values: [boolean]
  ): string;
  encodeFunctionData(functionFragment: "version", values?: undefined): string;

  decodeFunctionResult(functionFragment: "cast", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "disable", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "enable", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "instaIndex", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "isAuth", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "shield", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "switchShield",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "version", data: BytesLike): Result;

  events: {
    "LogCast(address,address,uint256)": EventFragment;
    "LogDisable(address)": EventFragment;
    "LogEnable(address)": EventFragment;
    "LogSwitchShield(bool)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "LogCast"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogDisable"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogEnable"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogSwitchShield"): EventFragment;
}

export type LogCastEvent = TypedEvent<
  [string, string, BigNumber],
  { origin: string; sender: string; value: BigNumber }
>;

export type LogCastEventFilter = TypedEventFilter<LogCastEvent>;

export type LogDisableEvent = TypedEvent<[string], { user: string }>;

export type LogDisableEventFilter = TypedEventFilter<LogDisableEvent>;

export type LogEnableEvent = TypedEvent<[string], { user: string }>;

export type LogEnableEventFilter = TypedEventFilter<LogEnableEvent>;

export type LogSwitchShieldEvent = TypedEvent<[boolean], { _shield: boolean }>;

export type LogSwitchShieldEventFilter = TypedEventFilter<LogSwitchShieldEvent>;

export interface InstaAccount extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: InstaAccountInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    cast(
      _targets: string[],
      _datas: BytesLike[],
      _origin: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    disable(
      user: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    enable(
      user: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    instaIndex(overrides?: CallOverrides): Promise<[string]>;

    isAuth(user: string, overrides?: CallOverrides): Promise<[boolean]>;

    shield(overrides?: CallOverrides): Promise<[boolean]>;

    switchShield(
      _shield: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    version(overrides?: CallOverrides): Promise<[BigNumber]>;
  };

  cast(
    _targets: string[],
    _datas: BytesLike[],
    _origin: string,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  disable(
    user: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  enable(
    user: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  instaIndex(overrides?: CallOverrides): Promise<string>;

  isAuth(user: string, overrides?: CallOverrides): Promise<boolean>;

  shield(overrides?: CallOverrides): Promise<boolean>;

  switchShield(
    _shield: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  version(overrides?: CallOverrides): Promise<BigNumber>;

  callStatic: {
    cast(
      _targets: string[],
      _datas: BytesLike[],
      _origin: string,
      overrides?: CallOverrides
    ): Promise<void>;

    disable(user: string, overrides?: CallOverrides): Promise<void>;

    enable(user: string, overrides?: CallOverrides): Promise<void>;

    instaIndex(overrides?: CallOverrides): Promise<string>;

    isAuth(user: string, overrides?: CallOverrides): Promise<boolean>;

    shield(overrides?: CallOverrides): Promise<boolean>;

    switchShield(_shield: boolean, overrides?: CallOverrides): Promise<void>;

    version(overrides?: CallOverrides): Promise<BigNumber>;
  };

  filters: {
    "LogCast(address,address,uint256)"(
      origin?: string | null,
      sender?: string | null,
      value?: null
    ): LogCastEventFilter;
    LogCast(
      origin?: string | null,
      sender?: string | null,
      value?: null
    ): LogCastEventFilter;

    "LogDisable(address)"(user?: string | null): LogDisableEventFilter;
    LogDisable(user?: string | null): LogDisableEventFilter;

    "LogEnable(address)"(user?: string | null): LogEnableEventFilter;
    LogEnable(user?: string | null): LogEnableEventFilter;

    "LogSwitchShield(bool)"(_shield?: null): LogSwitchShieldEventFilter;
    LogSwitchShield(_shield?: null): LogSwitchShieldEventFilter;
  };

  estimateGas: {
    cast(
      _targets: string[],
      _datas: BytesLike[],
      _origin: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    disable(
      user: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    enable(
      user: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    instaIndex(overrides?: CallOverrides): Promise<BigNumber>;

    isAuth(user: string, overrides?: CallOverrides): Promise<BigNumber>;

    shield(overrides?: CallOverrides): Promise<BigNumber>;

    switchShield(
      _shield: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    version(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    cast(
      _targets: string[],
      _datas: BytesLike[],
      _origin: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    disable(
      user: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    enable(
      user: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    instaIndex(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isAuth(
      user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    shield(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    switchShield(
      _shield: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    version(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
