/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { ConnectV2Auth, ConnectV2AuthInterface } from "../ConnectV2Auth";

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "_msgSender",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "_authority",
        type: "address",
      },
    ],
    name: "LogAddAuth",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "_msgSender",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "_authority",
        type: "address",
      },
    ],
    name: "LogRemoveAuth",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "authority",
        type: "address",
      },
    ],
    name: "add",
    outputs: [
      {
        internalType: "string",
        name: "_eventName",
        type: "string",
      },
      {
        internalType: "bytes",
        name: "_eventParam",
        type: "bytes",
      },
    ],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [],
    name: "name",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "authority",
        type: "address",
      },
    ],
    name: "remove",
    outputs: [
      {
        internalType: "string",
        name: "_eventName",
        type: "string",
      },
      {
        internalType: "bytes",
        name: "_eventParam",
        type: "bytes",
      },
    ],
    stateMutability: "payable",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b50610925806100206000396000f3fe6080604052600436106100345760003560e01c806306fdde03146100395780630a3b0a4f1461006457806329092d0e14610095575b600080fd5b34801561004557600080fd5b5061004e6100c6565b60405161005b919061072c565b60405180910390f35b61007e6004803603810190610079919061058e565b6100ff565b60405161008c92919061074e565b60405180910390f35b6100af60048036038101906100aa919061058e565b610228565b6040516100bd92919061074e565b60405180910390f35b6040518060400160405280600781526020017f417574682d76310000000000000000000000000000000000000000000000000081525081565b6060803073ffffffffffffffffffffffffffffffffffffffff16635bfa1b68846040518263ffffffff1660e01b815260040161013b91906106e8565b600060405180830381600087803b15801561015557600080fd5b505af1158015610169573d6000803e3d6000fd5b505050508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f0a0883e359d023e38c8befc2b894f838c1942537ae51cba71e2bc651af2b3a5d60405160405180910390a36040518060400160405280601b81526020017f4c6f674164644175746828616464726573732c6164647265737329000000000081525091503383604051602001610212929190610703565b6040516020818303038152906040529050915091565b606080600161023561039b565b11610275576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161026c90610785565b60405180910390fd5b3073ffffffffffffffffffffffffffffffffffffffff1663e6c09edf846040518263ffffffff1660e01b81526004016102ae91906106e8565b600060405180830381600087803b1580156102c857600080fd5b505af11580156102dc573d6000803e3d6000fd5b505050508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f7289d07acd866f85ba9176bdbac8304ca6072c00bde3d94c43afd8fbc8114db860405160405180910390a36040518060400160405280601e81526020017f4c6f6752656d6f76654175746828616464726573732c6164647265737329000081525091503383604051602001610385929190610703565b6040516020818303038152906040529050915091565b6000806103a66104d3565b905060008173ffffffffffffffffffffffffffffffffffffffff16636cfaf5e9306040518263ffffffff1660e01b81526004016103e391906106e8565b60206040518083038186803b1580156103fb57600080fd5b505afa15801561040f573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061043391906105e0565b90508173ffffffffffffffffffffffffffffffffffffffff16638028a9fd826040518263ffffffff1660e01b815260040161046e91906107a5565b60606040518083038186803b15801561048657600080fd5b505afa15801561049a573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104be91906105b7565b6040015167ffffffffffffffff169250505090565b6000734c8a1beb8a87765788946d6b19c6c6355194abeb905090565b6000813590506104fe816108c1565b92915050565b600081519050610513816108c1565b92915050565b60006060828403121561052b57600080fd5b61053560606107c0565b9050600061054584828501610504565b600083015250602061055984828501610504565b602083015250604061056d84828501610579565b60408301525092915050565b600081519050610588816108d8565b92915050565b6000602082840312156105a057600080fd5b60006105ae848285016104ef565b91505092915050565b6000606082840312156105c957600080fd5b60006105d784828501610519565b91505092915050565b6000602082840312156105f257600080fd5b600061060084828501610579565b91505092915050565b61061281610837565b82525050565b61062181610825565b82525050565b6000610632826107ed565b61063c8185610803565b935061064c81856020860161087d565b610655816108b0565b840191505092915050565b600061066b826107f8565b6106758185610814565b935061068581856020860161087d565b61068e816108b0565b840191505092915050565b60006106a6601883610814565b91507f52656d6f76696e672d616c6c2d617574686f72697469657300000000000000006000830152602082019050919050565b6106e281610869565b82525050565b60006020820190506106fd6000830184610618565b92915050565b60006040820190506107186000830185610609565b6107256020830184610618565b9392505050565b600060208201905081810360008301526107468184610660565b905092915050565b600060408201905081810360008301526107688185610660565b9050818103602083015261077c8184610627565b90509392505050565b6000602082019050818103600083015261079e81610699565b9050919050565b60006020820190506107ba60008301846106d9565b92915050565b6000604051905081810181811067ffffffffffffffff821117156107e357600080fd5b8060405250919050565b600081519050919050565b600081519050919050565b600082825260208201905092915050565b600082825260208201905092915050565b600061083082610849565b9050919050565b600061084282610849565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600067ffffffffffffffff82169050919050565b60005b8381101561089b578082015181840152602081019050610880565b838111156108aa576000848401525b50505050565b6000601f19601f8301169050919050565b6108ca81610825565b81146108d557600080fd5b50565b6108e181610869565b81146108ec57600080fd5b5056fea2646970667358221220a66108f60b4a0cff55bcc58816d3f3897f21815f62c5b35e11c66137cf45c05e64736f6c63430007000033";

type ConnectV2AuthConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: ConnectV2AuthConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class ConnectV2Auth__factory extends ContractFactory {
  constructor(...args: ConnectV2AuthConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ConnectV2Auth> {
    return super.deploy(overrides || {}) as Promise<ConnectV2Auth>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): ConnectV2Auth {
    return super.attach(address) as ConnectV2Auth;
  }
  connect(signer: Signer): ConnectV2Auth__factory {
    return super.connect(signer) as ConnectV2Auth__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): ConnectV2AuthInterface {
    return new utils.Interface(_abi) as ConnectV2AuthInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): ConnectV2Auth {
    return new Contract(address, _abi, signerOrProvider) as ConnectV2Auth;
  }
}
