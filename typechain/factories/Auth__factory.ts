/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { Auth, AuthInterface } from "../Auth";

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "_msgSender",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "_authority",
        type: "address",
      },
    ],
    name: "LogAddAuth",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "_msgSender",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "_authority",
        type: "address",
      },
    ],
    name: "LogRemoveAuth",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "authority",
        type: "address",
      },
    ],
    name: "add",
    outputs: [
      {
        internalType: "string",
        name: "_eventName",
        type: "string",
      },
      {
        internalType: "bytes",
        name: "_eventParam",
        type: "bytes",
      },
    ],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "authority",
        type: "address",
      },
    ],
    name: "remove",
    outputs: [
      {
        internalType: "string",
        name: "_eventName",
        type: "string",
      },
      {
        internalType: "bytes",
        name: "_eventParam",
        type: "bytes",
      },
    ],
    stateMutability: "payable",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b50610894806100206000396000f3fe6080604052600436106100295760003560e01c80630a3b0a4f1461002e57806329092d0e1461005f575b600080fd5b6100486004803603810190610043919061051f565b610090565b6040516100569291906106bd565b60405180910390f35b6100796004803603810190610074919061051f565b6101b9565b6040516100879291906106bd565b60405180910390f35b6060803073ffffffffffffffffffffffffffffffffffffffff16635bfa1b68846040518263ffffffff1660e01b81526004016100cc9190610679565b600060405180830381600087803b1580156100e657600080fd5b505af11580156100fa573d6000803e3d6000fd5b505050508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f0a0883e359d023e38c8befc2b894f838c1942537ae51cba71e2bc651af2b3a5d60405160405180910390a36040518060400160405280601b81526020017f4c6f674164644175746828616464726573732c61646472657373290000000000815250915033836040516020016101a3929190610694565b6040516020818303038152906040529050915091565b60608060016101c661032c565b11610206576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101fd906106f4565b60405180910390fd5b3073ffffffffffffffffffffffffffffffffffffffff1663e6c09edf846040518263ffffffff1660e01b815260040161023f9190610679565b600060405180830381600087803b15801561025957600080fd5b505af115801561026d573d6000803e3d6000fd5b505050508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f7289d07acd866f85ba9176bdbac8304ca6072c00bde3d94c43afd8fbc8114db860405160405180910390a36040518060400160405280601e81526020017f4c6f6752656d6f76654175746828616464726573732c6164647265737329000081525091503383604051602001610316929190610694565b6040516020818303038152906040529050915091565b600080610337610464565b905060008173ffffffffffffffffffffffffffffffffffffffff16636cfaf5e9306040518263ffffffff1660e01b81526004016103749190610679565b60206040518083038186803b15801561038c57600080fd5b505afa1580156103a0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103c49190610571565b90508173ffffffffffffffffffffffffffffffffffffffff16638028a9fd826040518263ffffffff1660e01b81526004016103ff9190610714565b60606040518083038186803b15801561041757600080fd5b505afa15801561042b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061044f9190610548565b6040015167ffffffffffffffff169250505090565b6000734c8a1beb8a87765788946d6b19c6c6355194abeb905090565b60008135905061048f81610830565b92915050565b6000815190506104a481610830565b92915050565b6000606082840312156104bc57600080fd5b6104c6606061072f565b905060006104d684828501610495565b60008301525060206104ea84828501610495565b60208301525060406104fe8482850161050a565b60408301525092915050565b60008151905061051981610847565b92915050565b60006020828403121561053157600080fd5b600061053f84828501610480565b91505092915050565b60006060828403121561055a57600080fd5b6000610568848285016104aa565b91505092915050565b60006020828403121561058357600080fd5b60006105918482850161050a565b91505092915050565b6105a3816107a6565b82525050565b6105b281610794565b82525050565b60006105c38261075c565b6105cd8185610772565b93506105dd8185602086016107ec565b6105e68161081f565b840191505092915050565b60006105fc82610767565b6106068185610783565b93506106168185602086016107ec565b61061f8161081f565b840191505092915050565b6000610637601883610783565b91507f52656d6f76696e672d616c6c2d617574686f72697469657300000000000000006000830152602082019050919050565b610673816107d8565b82525050565b600060208201905061068e60008301846105a9565b92915050565b60006040820190506106a9600083018561059a565b6106b660208301846105a9565b9392505050565b600060408201905081810360008301526106d781856105f1565b905081810360208301526106eb81846105b8565b90509392505050565b6000602082019050818103600083015261070d8161062a565b9050919050565b6000602082019050610729600083018461066a565b92915050565b6000604051905081810181811067ffffffffffffffff8211171561075257600080fd5b8060405250919050565b600081519050919050565b600081519050919050565b600082825260208201905092915050565b600082825260208201905092915050565b600061079f826107b8565b9050919050565b60006107b1826107b8565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600067ffffffffffffffff82169050919050565b60005b8381101561080a5780820151818401526020810190506107ef565b83811115610819576000848401525b50505050565b6000601f19601f8301169050919050565b61083981610794565b811461084457600080fd5b50565b610850816107d8565b811461085b57600080fd5b5056fea2646970667358221220802234b67195152f9f9f486177333bd5c0a1782b44add5b216e97ba5d3461bdc64736f6c63430007000033";

type AuthConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: AuthConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Auth__factory extends ContractFactory {
  constructor(...args: AuthConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<Auth> {
    return super.deploy(overrides || {}) as Promise<Auth>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): Auth {
    return super.attach(address) as Auth;
  }
  connect(signer: Signer): Auth__factory {
    return super.connect(signer) as Auth__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): AuthInterface {
    return new utils.Interface(_abi) as AuthInterface;
  }
  static connect(address: string, signerOrProvider: Signer | Provider): Auth {
    return new Contract(address, _abi, signerOrProvider) as Auth;
  }
}
