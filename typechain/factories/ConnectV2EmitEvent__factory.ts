/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  ConnectV2EmitEvent,
  ConnectV2EmitEventInterface,
} from "../ConnectV2EmitEvent";

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "dsaAddress",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "_sender",
        type: "address",
      },
    ],
    name: "LogEmitEvent",
    type: "event",
  },
  {
    inputs: [],
    name: "emitEvent",
    outputs: [
      {
        internalType: "string",
        name: "_eventName",
        type: "string",
      },
      {
        internalType: "bytes",
        name: "_eventParam",
        type: "bytes",
      },
    ],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [],
    name: "name",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b5061030b806100206000396000f3fe6080604052600436106100295760003560e01c806306fdde031461002e5780637b0cb839146100be575b600080fd5b34801561003a57600080fd5b506100436101ad565b6040518080602001828103825283818151815260200191508051906020019080838360005b83811015610083578082015181840152602081019050610068565b50505050905090810190601f1680156100b05780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b6100c66101e6565b604051808060200180602001838103835285818151815260200191508051906020019080838360005b8381101561010a5780820151818401526020810190506100ef565b50505050905090810190601f1680156101375780820380516001836020036101000a031916815260200191505b50838103825284818151815260200191508051906020019080838360005b83811015610170578082015181840152602081019050610155565b50505050905090810190601f16801561019d5780820380516001836020036101000a031916815260200191505b5094505050505060405180910390f35b6040518060400160405280600c81526020017f456d69744576656e742d7631000000000000000000000000000000000000000081525081565b6060803373ffffffffffffffffffffffffffffffffffffffff163073ffffffffffffffffffffffffffffffffffffffff167f35bdc55d38eff9c7b7fe4c02be8596075356ce902205f1c65613f60ec0705f9660405160405180910390a36040518060400160405280601d81526020017f4c6f67456d69744576656e7428616464726573732c616464726573732900000081525091503033604051602001808373ffffffffffffffffffffffffffffffffffffffff1681526020018273ffffffffffffffffffffffffffffffffffffffff168152602001925050506040516020818303038152906040529050909156fea2646970667358221220a925a657cced6b43afa68b661a54950e271768dfa596e1343b70edd6168ba42564736f6c63430007000033";

type ConnectV2EmitEventConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: ConnectV2EmitEventConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class ConnectV2EmitEvent__factory extends ContractFactory {
  constructor(...args: ConnectV2EmitEventConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ConnectV2EmitEvent> {
    return super.deploy(overrides || {}) as Promise<ConnectV2EmitEvent>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): ConnectV2EmitEvent {
    return super.attach(address) as ConnectV2EmitEvent;
  }
  connect(signer: Signer): ConnectV2EmitEvent__factory {
    return super.connect(signer) as ConnectV2EmitEvent__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): ConnectV2EmitEventInterface {
    return new utils.Interface(_abi) as ConnectV2EmitEventInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): ConnectV2EmitEvent {
    return new Contract(address, _abi, signerOrProvider) as ConnectV2EmitEvent;
  }
}
