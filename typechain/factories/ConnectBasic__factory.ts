/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { ConnectBasic, ConnectBasicInterface } from "../ConnectBasic";

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "erc20",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "tokenAmt",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "getId",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "setId",
        type: "uint256",
      },
    ],
    name: "LogDeposit",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "erc20",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "tokenAmt",
        type: "uint256",
      },
      {
        indexed: true,
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "getId",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "setId",
        type: "uint256",
      },
    ],
    name: "LogWithdraw",
    type: "event",
  },
  {
    inputs: [],
    name: "connectorID",
    outputs: [
      {
        internalType: "uint256",
        name: "_type",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_id",
        type: "uint256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "erc20",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "tokenAmt",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "getId",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "setId",
        type: "uint256",
      },
    ],
    name: "deposit",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [],
    name: "getEthAddr",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [],
    name: "getEventAddr",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [],
    name: "getMemoryAddr",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [],
    name: "name",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "erc20",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "tokenAmt",
        type: "uint256",
      },
      {
        internalType: "address payable",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "getId",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "setId",
        type: "uint256",
      },
    ],
    name: "withdraw",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b50610eb3806100206000396000f3fe6080604052600436106100705760003560e01c8063ce88b4391161004e578063ce88b439146101c8578063e82eb6fa1461022a578063eb15f7811461026b578063fa821c9b1461029d57610070565b806306fdde0314610075578063202bb80c146101055780634bd3ab8214610146575b600080fd5b34801561008157600080fd5b5061008a6102de565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156100ca5780820151818401526020810190506100af565b50505050905090810190601f1680156100f75780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561011157600080fd5b5061011a610317565b604051808273ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b6101c6600480360360a081101561015c57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035906020019092919080359060200190929190505050610333565b005b610228600480360360808110156101de57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035906020019092919080359060200190929190803590602001909291905050506108b1565b005b34801561023657600080fd5b5061023f610d2c565b604051808273ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561027757600080fd5b50610280610d31565b604051808381526020018281526020019250505060405180910390f35b3480156102a957600080fd5b506102b2610d44565b604051808273ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b6040518060400160405280600881526020017f42617369632d763100000000000000000000000000000000000000000000000081525081565b600073eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee905090565b3073ffffffffffffffffffffffffffffffffffffffff16632520e7ff846040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff16815260200191505060206040518083038186803b15801561039a57600080fd5b505afa1580156103ae573d6000803e3d6000fd5b505050506040513d60208110156103c457600080fd5b8101908080519060200190929190505050610447576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260128152602001807f696e76616c69642d746f2d61646472657373000000000000000000000000000081525060200191505060405180910390fd5b60006104538386610d49565b905061045d610317565b73ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff16141561050d577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff81146104bd57806104bf565b475b90508373ffffffffffffffffffffffffffffffffffffffff166108fc829081150290604051600060405180830381858888f19350505050158015610507573d6000803e3d6000fd5b50610693565b60008690507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821461053f57816105e2565b8073ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff16815260200191505060206040518083038186803b1580156105a657600080fd5b505afa1580156105ba573d6000803e3d6000fd5b505050506040513d60208110156105d057600080fd5b81019080805190602001909291905050505b91508073ffffffffffffffffffffffffffffffffffffffff1663a9059cbb86846040518363ffffffff1660e01b8152600401808373ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050602060405180830381600087803b15801561065557600080fd5b505af1158015610669573d6000803e3d6000fd5b505050506040513d602081101561067f57600080fd5b810190808051906020019092919050505050505b61069d8282610df6565b8373ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff167fbda29dc1242153445159457be3dc12cdc3b4ca777000c536f8a42078b029672d83868660405180848152602001838152602001828152602001935050505060405180910390a360007fbda29dc1242153445159457be3dc12cdc3b4ca777000c536f8a42078b029672d905060608783878787604051602001808673ffffffffffffffffffffffffffffffffffffffff1681526020018581526020018473ffffffffffffffffffffffffffffffffffffffff1681526020018381526020018281526020019550505050505060405160208183030381529060405290506000806107b2610d31565b915091506107be610d2c565b73ffffffffffffffffffffffffffffffffffffffff1663e14d4fb1838387876040518563ffffffff1660e01b81526004018085815260200184815260200183815260200180602001828103825283818151815260200191508051906020019080838360005b8381101561083e578082015181840152602081019050610823565b50505050905090810190601f16801561086b5780820380516001836020036101000a031916815260200191505b5095505050505050600060405180830381600087803b15801561088d57600080fd5b505af11580156108a1573d6000803e3d6000fd5b5050505050505050505050505050565b60006108bd8385610d49565b90506108c7610317565b73ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff1614610aa15760008590507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821461092b57816109ce565b8073ffffffffffffffffffffffffffffffffffffffff166370a08231336040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff16815260200191505060206040518083038186803b15801561099257600080fd5b505afa1580156109a6573d6000803e3d6000fd5b505050506040513d60208110156109bc57600080fd5b81019080805190602001909291905050505b91508073ffffffffffffffffffffffffffffffffffffffff166323b872dd3330856040518463ffffffff1660e01b8152600401808473ffffffffffffffffffffffffffffffffffffffff1681526020018373ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019350505050602060405180830381600087803b158015610a5f57600080fd5b505af1158015610a73573d6000803e3d6000fd5b505050506040513d6020811015610a8957600080fd5b81019080805190602001909291905050505050610b44565b80341480610ace57507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff81145b610b40576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260148152602001807f696e76616c69642d65746865722d616d6f756e7400000000000000000000000081525060200191505060405180910390fd5b3490505b610b4e8282610df6565b8473ffffffffffffffffffffffffffffffffffffffff167f4b2bcb0ca50531683faa51870e1018aa0d7272c7f2acc5399389b0c0493865d982858560405180848152602001838152602001828152602001935050505060405180910390a260007f4b2bcb0ca50531683faa51870e1018aa0d7272c7f2acc5399389b0c0493865d99050606086838686604051602001808573ffffffffffffffffffffffffffffffffffffffff1681526020018481526020018381526020018281526020019450505050506040516020818303038152906040529050600080610c2e610d31565b91509150610c3a610d2c565b73ffffffffffffffffffffffffffffffffffffffff1663e14d4fb1838387876040518563ffffffff1660e01b81526004018085815260200184815260200183815260200180602001828103825283818151815260200191508051906020019080838360005b83811015610cba578082015181840152602081019050610c9f565b50505050905090810190601f168015610ce75780820380516001836020036101000a031916815260200191505b5095505050505050600060405180830381600087803b158015610d0957600080fd5b505af1158015610d1d573d6000803e3d6000fd5b50505050505050505050505050565b600090565b6000806001600280925081935050509091565b600090565b6000808314610dec57610d5a610d44565b73ffffffffffffffffffffffffffffffffffffffff1663a9c70eaa846040518263ffffffff1660e01b815260040180828152602001915050602060405180830381600087803b158015610dac57600080fd5b505af1158015610dc0573d6000803e3d6000fd5b505050506040513d6020811015610dd657600080fd5b8101908080519060200190929190505050610dee565b815b905092915050565b60008214610e7957610e06610d44565b73ffffffffffffffffffffffffffffffffffffffff166361e3c94483836040518363ffffffff1660e01b81526004018083815260200182815260200192505050600060405180830381600087803b158015610e6057600080fd5b505af1158015610e74573d6000803e3d6000fd5b505050505b505056fea2646970667358221220846bfd9b90020413a1889d40a28ae99766bb55c0f74c8241636a382ed70de9fb64736f6c63430007000033";

type ConnectBasicConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: ConnectBasicConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class ConnectBasic__factory extends ContractFactory {
  constructor(...args: ConnectBasicConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ConnectBasic> {
    return super.deploy(overrides || {}) as Promise<ConnectBasic>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): ConnectBasic {
    return super.attach(address) as ConnectBasic;
  }
  connect(signer: Signer): ConnectBasic__factory {
    return super.connect(signer) as ConnectBasic__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): ConnectBasicInterface {
    return new utils.Interface(_abi) as ConnectBasicInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): ConnectBasic {
    return new Contract(address, _abi, signerOrProvider) as ConnectBasic;
  }
}
