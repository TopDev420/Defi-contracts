/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export interface ConnectV2EmitEventInterface extends utils.Interface {
  functions: {
    "emitEvent()": FunctionFragment;
    "name()": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "emitEvent", values?: undefined): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;

  decodeFunctionResult(functionFragment: "emitEvent", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;

  events: {
    "LogEmitEvent(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "LogEmitEvent"): EventFragment;
}

export type LogEmitEventEvent = TypedEvent<
  [string, string],
  { dsaAddress: string; _sender: string }
>;

export type LogEmitEventEventFilter = TypedEventFilter<LogEmitEventEvent>;

export interface ConnectV2EmitEvent extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ConnectV2EmitEventInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    emitEvent(
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    name(overrides?: CallOverrides): Promise<[string]>;
  };

  emitEvent(
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  name(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    emitEvent(
      overrides?: CallOverrides
    ): Promise<[string, string] & { _eventName: string; _eventParam: string }>;

    name(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    "LogEmitEvent(address,address)"(
      dsaAddress?: string | null,
      _sender?: string | null
    ): LogEmitEventEventFilter;
    LogEmitEvent(
      dsaAddress?: string | null,
      _sender?: string | null
    ): LogEmitEventEventFilter;
  };

  estimateGas: {
    emitEvent(
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    emitEvent(
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    name(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
