/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export interface ConnectV2AuthInterface extends utils.Interface {
  functions: {
    "add(address)": FunctionFragment;
    "name()": FunctionFragment;
    "remove(address)": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "add", values: [string]): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(functionFragment: "remove", values: [string]): string;

  decodeFunctionResult(functionFragment: "add", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "remove", data: BytesLike): Result;

  events: {
    "LogAddAuth(address,address)": EventFragment;
    "LogRemoveAuth(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "LogAddAuth"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogRemoveAuth"): EventFragment;
}

export type LogAddAuthEvent = TypedEvent<
  [string, string],
  { _msgSender: string; _authority: string }
>;

export type LogAddAuthEventFilter = TypedEventFilter<LogAddAuthEvent>;

export type LogRemoveAuthEvent = TypedEvent<
  [string, string],
  { _msgSender: string; _authority: string }
>;

export type LogRemoveAuthEventFilter = TypedEventFilter<LogRemoveAuthEvent>;

export interface ConnectV2Auth extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ConnectV2AuthInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    add(
      authority: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    name(overrides?: CallOverrides): Promise<[string]>;

    remove(
      authority: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  add(
    authority: string,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  name(overrides?: CallOverrides): Promise<string>;

  remove(
    authority: string,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    add(
      authority: string,
      overrides?: CallOverrides
    ): Promise<[string, string] & { _eventName: string; _eventParam: string }>;

    name(overrides?: CallOverrides): Promise<string>;

    remove(
      authority: string,
      overrides?: CallOverrides
    ): Promise<[string, string] & { _eventName: string; _eventParam: string }>;
  };

  filters: {
    "LogAddAuth(address,address)"(
      _msgSender?: string | null,
      _authority?: string | null
    ): LogAddAuthEventFilter;
    LogAddAuth(
      _msgSender?: string | null,
      _authority?: string | null
    ): LogAddAuthEventFilter;

    "LogRemoveAuth(address,address)"(
      _msgSender?: string | null,
      _authority?: string | null
    ): LogRemoveAuthEventFilter;
    LogRemoveAuth(
      _msgSender?: string | null,
      _authority?: string | null
    ): LogRemoveAuthEventFilter;
  };

  estimateGas: {
    add(
      authority: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<BigNumber>;

    remove(
      authority: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    add(
      authority: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    name(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    remove(
      authority: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
