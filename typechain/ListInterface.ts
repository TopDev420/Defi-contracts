/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export type AccountLinkStruct = {
  first: string;
  last: string;
  count: BigNumberish;
};

export type AccountLinkStructOutput = [string, string, BigNumber] & {
  first: string;
  last: string;
  count: BigNumber;
};

export type AccountListStruct = { prev: string; next: string };

export type AccountListStructOutput = [string, string] & {
  prev: string;
  next: string;
};

export type UserLinkStruct = {
  first: BigNumberish;
  last: BigNumberish;
  count: BigNumberish;
};

export type UserLinkStructOutput = [BigNumber, BigNumber, BigNumber] & {
  first: BigNumber;
  last: BigNumber;
  count: BigNumber;
};

export type UserListStruct = { prev: BigNumberish; next: BigNumberish };

export type UserListStructOutput = [BigNumber, BigNumber] & {
  prev: BigNumber;
  next: BigNumber;
};

export interface ListInterfaceInterface extends utils.Interface {
  functions: {
    "accountAddr(uint64)": FunctionFragment;
    "accountID(address)": FunctionFragment;
    "accountLink(uint64)": FunctionFragment;
    "accountList(uint64,address)": FunctionFragment;
    "accounts()": FunctionFragment;
    "userLink(address)": FunctionFragment;
    "userList(address,uint64)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "accountAddr",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "accountID", values: [string]): string;
  encodeFunctionData(
    functionFragment: "accountLink",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "accountList",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(functionFragment: "accounts", values?: undefined): string;
  encodeFunctionData(functionFragment: "userLink", values: [string]): string;
  encodeFunctionData(
    functionFragment: "userList",
    values: [string, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "accountAddr",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "accountID", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "accountLink",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "accountList",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "accounts", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "userLink", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "userList", data: BytesLike): Result;

  events: {};
}

export interface ListInterface extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ListInterfaceInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    accountAddr(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    accountID(arg0: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    accountLink(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[AccountLinkStructOutput]>;

    accountList(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<[AccountListStructOutput]>;

    accounts(overrides?: CallOverrides): Promise<[BigNumber]>;

    userLink(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[UserLinkStructOutput]>;

    userList(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[UserListStructOutput]>;
  };

  accountAddr(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

  accountID(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  accountLink(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<AccountLinkStructOutput>;

  accountList(
    arg0: BigNumberish,
    arg1: string,
    overrides?: CallOverrides
  ): Promise<AccountListStructOutput>;

  accounts(overrides?: CallOverrides): Promise<BigNumber>;

  userLink(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<UserLinkStructOutput>;

  userList(
    arg0: string,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<UserListStructOutput>;

  callStatic: {
    accountAddr(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

    accountID(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    accountLink(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<AccountLinkStructOutput>;

    accountList(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<AccountListStructOutput>;

    accounts(overrides?: CallOverrides): Promise<BigNumber>;

    userLink(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<UserLinkStructOutput>;

    userList(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<UserListStructOutput>;
  };

  filters: {};

  estimateGas: {
    accountAddr(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    accountID(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    accountLink(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    accountList(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    accounts(overrides?: CallOverrides): Promise<BigNumber>;

    userLink(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    userList(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    accountAddr(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    accountID(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    accountLink(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    accountList(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    accounts(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    userLink(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    userList(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
