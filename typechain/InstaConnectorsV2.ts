/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export interface InstaConnectorsV2Interface extends utils.Interface {
  functions: {
    "addConnectors(string[],address[])": FunctionFragment;
    "chief(address)": FunctionFragment;
    "connectors(string)": FunctionFragment;
    "instaIndex()": FunctionFragment;
    "isConnectors(string[])": FunctionFragment;
    "removeConnectors(string[])": FunctionFragment;
    "toggleChief(address)": FunctionFragment;
    "updateConnectors(string[],address[])": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "addConnectors",
    values: [string[], string[]]
  ): string;
  encodeFunctionData(functionFragment: "chief", values: [string]): string;
  encodeFunctionData(functionFragment: "connectors", values: [string]): string;
  encodeFunctionData(
    functionFragment: "instaIndex",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isConnectors",
    values: [string[]]
  ): string;
  encodeFunctionData(
    functionFragment: "removeConnectors",
    values: [string[]]
  ): string;
  encodeFunctionData(functionFragment: "toggleChief", values: [string]): string;
  encodeFunctionData(
    functionFragment: "updateConnectors",
    values: [string[], string[]]
  ): string;

  decodeFunctionResult(
    functionFragment: "addConnectors",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "chief", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "connectors", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "instaIndex", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isConnectors",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeConnectors",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "toggleChief",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateConnectors",
    data: BytesLike
  ): Result;

  events: {
    "LogConnectorAdded(bytes32,string,address)": EventFragment;
    "LogConnectorRemoved(bytes32,string,address)": EventFragment;
    "LogConnectorUpdated(bytes32,string,address,address)": EventFragment;
    "LogController(address,bool)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "LogConnectorAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogConnectorRemoved"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogConnectorUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogController"): EventFragment;
}

export type LogConnectorAddedEvent = TypedEvent<
  [string, string, string],
  { connectorNameHash: string; connectorName: string; connector: string }
>;

export type LogConnectorAddedEventFilter = TypedEventFilter<LogConnectorAddedEvent>;

export type LogConnectorRemovedEvent = TypedEvent<
  [string, string, string],
  { connectorNameHash: string; connectorName: string; connector: string }
>;

export type LogConnectorRemovedEventFilter = TypedEventFilter<LogConnectorRemovedEvent>;

export type LogConnectorUpdatedEvent = TypedEvent<
  [string, string, string, string],
  {
    connectorNameHash: string;
    connectorName: string;
    oldConnector: string;
    newConnector: string;
  }
>;

export type LogConnectorUpdatedEventFilter = TypedEventFilter<LogConnectorUpdatedEvent>;

export type LogControllerEvent = TypedEvent<
  [string, boolean],
  { addr: string; isChief: boolean }
>;

export type LogControllerEventFilter = TypedEventFilter<LogControllerEvent>;

export interface InstaConnectorsV2 extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: InstaConnectorsV2Interface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    addConnectors(
      _connectorNames: string[],
      _connectors: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    chief(arg0: string, overrides?: CallOverrides): Promise<[boolean]>;

    connectors(arg0: string, overrides?: CallOverrides): Promise<[string]>;

    instaIndex(overrides?: CallOverrides): Promise<[string]>;

    isConnectors(
      _connectorNames: string[],
      overrides?: CallOverrides
    ): Promise<[boolean, string[]] & { isOk: boolean; _connectors: string[] }>;

    removeConnectors(
      _connectorNames: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    toggleChief(
      _chiefAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateConnectors(
      _connectorNames: string[],
      _connectors: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  addConnectors(
    _connectorNames: string[],
    _connectors: string[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  chief(arg0: string, overrides?: CallOverrides): Promise<boolean>;

  connectors(arg0: string, overrides?: CallOverrides): Promise<string>;

  instaIndex(overrides?: CallOverrides): Promise<string>;

  isConnectors(
    _connectorNames: string[],
    overrides?: CallOverrides
  ): Promise<[boolean, string[]] & { isOk: boolean; _connectors: string[] }>;

  removeConnectors(
    _connectorNames: string[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  toggleChief(
    _chiefAddress: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateConnectors(
    _connectorNames: string[],
    _connectors: string[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    addConnectors(
      _connectorNames: string[],
      _connectors: string[],
      overrides?: CallOverrides
    ): Promise<void>;

    chief(arg0: string, overrides?: CallOverrides): Promise<boolean>;

    connectors(arg0: string, overrides?: CallOverrides): Promise<string>;

    instaIndex(overrides?: CallOverrides): Promise<string>;

    isConnectors(
      _connectorNames: string[],
      overrides?: CallOverrides
    ): Promise<[boolean, string[]] & { isOk: boolean; _connectors: string[] }>;

    removeConnectors(
      _connectorNames: string[],
      overrides?: CallOverrides
    ): Promise<void>;

    toggleChief(
      _chiefAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    updateConnectors(
      _connectorNames: string[],
      _connectors: string[],
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "LogConnectorAdded(bytes32,string,address)"(
      connectorNameHash?: BytesLike | null,
      connectorName?: null,
      connector?: string | null
    ): LogConnectorAddedEventFilter;
    LogConnectorAdded(
      connectorNameHash?: BytesLike | null,
      connectorName?: null,
      connector?: string | null
    ): LogConnectorAddedEventFilter;

    "LogConnectorRemoved(bytes32,string,address)"(
      connectorNameHash?: BytesLike | null,
      connectorName?: null,
      connector?: string | null
    ): LogConnectorRemovedEventFilter;
    LogConnectorRemoved(
      connectorNameHash?: BytesLike | null,
      connectorName?: null,
      connector?: string | null
    ): LogConnectorRemovedEventFilter;

    "LogConnectorUpdated(bytes32,string,address,address)"(
      connectorNameHash?: BytesLike | null,
      connectorName?: null,
      oldConnector?: string | null,
      newConnector?: string | null
    ): LogConnectorUpdatedEventFilter;
    LogConnectorUpdated(
      connectorNameHash?: BytesLike | null,
      connectorName?: null,
      oldConnector?: string | null,
      newConnector?: string | null
    ): LogConnectorUpdatedEventFilter;

    "LogController(address,bool)"(
      addr?: string | null,
      isChief?: boolean | null
    ): LogControllerEventFilter;
    LogController(
      addr?: string | null,
      isChief?: boolean | null
    ): LogControllerEventFilter;
  };

  estimateGas: {
    addConnectors(
      _connectorNames: string[],
      _connectors: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    chief(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    connectors(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    instaIndex(overrides?: CallOverrides): Promise<BigNumber>;

    isConnectors(
      _connectorNames: string[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    removeConnectors(
      _connectorNames: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    toggleChief(
      _chiefAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateConnectors(
      _connectorNames: string[],
      _connectors: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    addConnectors(
      _connectorNames: string[],
      _connectors: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    chief(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    connectors(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    instaIndex(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isConnectors(
      _connectorNames: string[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    removeConnectors(
      _connectorNames: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    toggleChief(
      _chiefAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateConnectors(
      _connectorNames: string[],
      _connectors: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
