/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export interface ListingsInterface extends utils.Interface {
  functions: {
    "chief(address)": FunctionFragment;
    "connectorArray(uint256)": FunctionFragment;
    "connectorCount()": FunctionFragment;
    "connectors(address)": FunctionFragment;
    "disableChief(address)": FunctionFragment;
    "enableChief(address)": FunctionFragment;
    "instaIndex()": FunctionFragment;
    "staticConnectorArray(uint256)": FunctionFragment;
    "staticConnectors(address)": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "chief", values: [string]): string;
  encodeFunctionData(
    functionFragment: "connectorArray",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "connectorCount",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "connectors", values: [string]): string;
  encodeFunctionData(
    functionFragment: "disableChief",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "enableChief", values: [string]): string;
  encodeFunctionData(
    functionFragment: "instaIndex",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "staticConnectorArray",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "staticConnectors",
    values: [string]
  ): string;

  decodeFunctionResult(functionFragment: "chief", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "connectorArray",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "connectorCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "connectors", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "disableChief",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "enableChief",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "instaIndex", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "staticConnectorArray",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "staticConnectors",
    data: BytesLike
  ): Result;

  events: {
    "LogAddController(address)": EventFragment;
    "LogRemoveController(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "LogAddController"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogRemoveController"): EventFragment;
}

export type LogAddControllerEvent = TypedEvent<[string], { addr: string }>;

export type LogAddControllerEventFilter = TypedEventFilter<LogAddControllerEvent>;

export type LogRemoveControllerEvent = TypedEvent<[string], { addr: string }>;

export type LogRemoveControllerEventFilter = TypedEventFilter<LogRemoveControllerEvent>;

export interface Listings extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ListingsInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    chief(arg0: string, overrides?: CallOverrides): Promise<[boolean]>;

    connectorArray(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    connectorCount(overrides?: CallOverrides): Promise<[BigNumber]>;

    connectors(arg0: string, overrides?: CallOverrides): Promise<[boolean]>;

    disableChief(
      _userAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    enableChief(
      _userAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    instaIndex(overrides?: CallOverrides): Promise<[string]>;

    staticConnectorArray(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    staticConnectors(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;
  };

  chief(arg0: string, overrides?: CallOverrides): Promise<boolean>;

  connectorArray(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  connectorCount(overrides?: CallOverrides): Promise<BigNumber>;

  connectors(arg0: string, overrides?: CallOverrides): Promise<boolean>;

  disableChief(
    _userAddress: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  enableChief(
    _userAddress: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  instaIndex(overrides?: CallOverrides): Promise<string>;

  staticConnectorArray(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  staticConnectors(arg0: string, overrides?: CallOverrides): Promise<boolean>;

  callStatic: {
    chief(arg0: string, overrides?: CallOverrides): Promise<boolean>;

    connectorArray(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    connectorCount(overrides?: CallOverrides): Promise<BigNumber>;

    connectors(arg0: string, overrides?: CallOverrides): Promise<boolean>;

    disableChief(
      _userAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    enableChief(_userAddress: string, overrides?: CallOverrides): Promise<void>;

    instaIndex(overrides?: CallOverrides): Promise<string>;

    staticConnectorArray(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    staticConnectors(arg0: string, overrides?: CallOverrides): Promise<boolean>;
  };

  filters: {
    "LogAddController(address)"(
      addr?: string | null
    ): LogAddControllerEventFilter;
    LogAddController(addr?: string | null): LogAddControllerEventFilter;

    "LogRemoveController(address)"(
      addr?: string | null
    ): LogRemoveControllerEventFilter;
    LogRemoveController(addr?: string | null): LogRemoveControllerEventFilter;
  };

  estimateGas: {
    chief(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    connectorArray(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    connectorCount(overrides?: CallOverrides): Promise<BigNumber>;

    connectors(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    disableChief(
      _userAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    enableChief(
      _userAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    instaIndex(overrides?: CallOverrides): Promise<BigNumber>;

    staticConnectorArray(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    staticConnectors(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    chief(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    connectorArray(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    connectorCount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    connectors(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    disableChief(
      _userAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    enableChief(
      _userAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    instaIndex(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    staticConnectorArray(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    staticConnectors(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
