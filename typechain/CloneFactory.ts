/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export interface CloneFactoryInterface extends utils.Interface {
  functions: {
    "account(uint256)": FunctionFragment;
    "addNewAccount(address,address,address)": FunctionFragment;
    "changeCheck(uint256,address)": FunctionFragment;
    "changeMaster(address)": FunctionFragment;
    "check(uint256)": FunctionFragment;
    "connectors(uint256)": FunctionFragment;
    "isClone(uint256,address)": FunctionFragment;
    "list()": FunctionFragment;
    "master()": FunctionFragment;
    "updateMaster()": FunctionFragment;
    "versionCount()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "account",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "addNewAccount",
    values: [string, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "changeCheck",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "changeMaster",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "check", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "connectors",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "isClone",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(functionFragment: "list", values?: undefined): string;
  encodeFunctionData(functionFragment: "master", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "updateMaster",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "versionCount",
    values?: undefined
  ): string;

  decodeFunctionResult(functionFragment: "account", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "addNewAccount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "changeCheck",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "changeMaster",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "check", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "connectors", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "isClone", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "list", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "master", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "updateMaster",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "versionCount",
    data: BytesLike
  ): Result;

  events: {
    "LogNewAccount(address,address,address)": EventFragment;
    "LogNewCheck(uint256,address)": EventFragment;
    "LogNewMaster(address)": EventFragment;
    "LogUpdateMaster(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "LogNewAccount"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogNewCheck"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogNewMaster"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogUpdateMaster"): EventFragment;
}

export type LogNewAccountEvent = TypedEvent<
  [string, string, string],
  { _newAccount: string; _connectors: string; _check: string }
>;

export type LogNewAccountEventFilter = TypedEventFilter<LogNewAccountEvent>;

export type LogNewCheckEvent = TypedEvent<
  [BigNumber, string],
  { accountVersion: BigNumber; check: string }
>;

export type LogNewCheckEventFilter = TypedEventFilter<LogNewCheckEvent>;

export type LogNewMasterEvent = TypedEvent<[string], { master: string }>;

export type LogNewMasterEventFilter = TypedEventFilter<LogNewMasterEvent>;

export type LogUpdateMasterEvent = TypedEvent<[string], { master: string }>;

export type LogUpdateMasterEventFilter = TypedEventFilter<LogUpdateMasterEvent>;

export interface CloneFactory extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: CloneFactoryInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    account(arg0: BigNumberish, overrides?: CallOverrides): Promise<[string]>;

    addNewAccount(
      _newAccount: string,
      _connectors: string,
      _check: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    changeCheck(
      accountVersion: BigNumberish,
      _newCheck: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    changeMaster(
      _newMaster: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    check(arg0: BigNumberish, overrides?: CallOverrides): Promise<[string]>;

    connectors(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    isClone(
      version: BigNumberish,
      query: string,
      overrides?: CallOverrides
    ): Promise<[boolean] & { result: boolean }>;

    list(overrides?: CallOverrides): Promise<[string]>;

    master(overrides?: CallOverrides): Promise<[string]>;

    updateMaster(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    versionCount(overrides?: CallOverrides): Promise<[BigNumber]>;
  };

  account(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

  addNewAccount(
    _newAccount: string,
    _connectors: string,
    _check: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  changeCheck(
    accountVersion: BigNumberish,
    _newCheck: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  changeMaster(
    _newMaster: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  check(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

  connectors(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

  isClone(
    version: BigNumberish,
    query: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  list(overrides?: CallOverrides): Promise<string>;

  master(overrides?: CallOverrides): Promise<string>;

  updateMaster(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  versionCount(overrides?: CallOverrides): Promise<BigNumber>;

  callStatic: {
    account(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

    addNewAccount(
      _newAccount: string,
      _connectors: string,
      _check: string,
      overrides?: CallOverrides
    ): Promise<void>;

    changeCheck(
      accountVersion: BigNumberish,
      _newCheck: string,
      overrides?: CallOverrides
    ): Promise<void>;

    changeMaster(_newMaster: string, overrides?: CallOverrides): Promise<void>;

    check(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

    connectors(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

    isClone(
      version: BigNumberish,
      query: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    list(overrides?: CallOverrides): Promise<string>;

    master(overrides?: CallOverrides): Promise<string>;

    updateMaster(overrides?: CallOverrides): Promise<void>;

    versionCount(overrides?: CallOverrides): Promise<BigNumber>;
  };

  filters: {
    "LogNewAccount(address,address,address)"(
      _newAccount?: string | null,
      _connectors?: string | null,
      _check?: string | null
    ): LogNewAccountEventFilter;
    LogNewAccount(
      _newAccount?: string | null,
      _connectors?: string | null,
      _check?: string | null
    ): LogNewAccountEventFilter;

    "LogNewCheck(uint256,address)"(
      accountVersion?: BigNumberish | null,
      check?: string | null
    ): LogNewCheckEventFilter;
    LogNewCheck(
      accountVersion?: BigNumberish | null,
      check?: string | null
    ): LogNewCheckEventFilter;

    "LogNewMaster(address)"(master?: string | null): LogNewMasterEventFilter;
    LogNewMaster(master?: string | null): LogNewMasterEventFilter;

    "LogUpdateMaster(address)"(
      master?: string | null
    ): LogUpdateMasterEventFilter;
    LogUpdateMaster(master?: string | null): LogUpdateMasterEventFilter;
  };

  estimateGas: {
    account(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    addNewAccount(
      _newAccount: string,
      _connectors: string,
      _check: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    changeCheck(
      accountVersion: BigNumberish,
      _newCheck: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    changeMaster(
      _newMaster: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    check(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    connectors(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isClone(
      version: BigNumberish,
      query: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    list(overrides?: CallOverrides): Promise<BigNumber>;

    master(overrides?: CallOverrides): Promise<BigNumber>;

    updateMaster(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    versionCount(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    account(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    addNewAccount(
      _newAccount: string,
      _connectors: string,
      _check: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    changeCheck(
      accountVersion: BigNumberish,
      _newCheck: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    changeMaster(
      _newMaster: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    check(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    connectors(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isClone(
      version: BigNumberish,
      query: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    list(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    master(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    updateMaster(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    versionCount(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
