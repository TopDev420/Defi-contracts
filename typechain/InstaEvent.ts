/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export interface InstaEventInterface extends utils.Interface {
  functions: {
    "emitEvent(uint256,uint256,bytes32,bytes)": FunctionFragment;
    "instaList()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "emitEvent",
    values: [BigNumberish, BigNumberish, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "instaList", values?: undefined): string;

  decodeFunctionResult(functionFragment: "emitEvent", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "instaList", data: BytesLike): Result;

  events: {
    "LogEvent(uint64,uint64,uint64,bytes32,bytes)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "LogEvent"): EventFragment;
}

export type LogEventEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber, string, string],
  {
    connectorType: BigNumber;
    connectorID: BigNumber;
    accountID: BigNumber;
    eventCode: string;
    eventData: string;
  }
>;

export type LogEventEventFilter = TypedEventFilter<LogEventEvent>;

export interface InstaEvent extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: InstaEventInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    emitEvent(
      _connectorType: BigNumberish,
      _connectorID: BigNumberish,
      _eventCode: BytesLike,
      _eventData: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    instaList(overrides?: CallOverrides): Promise<[string]>;
  };

  emitEvent(
    _connectorType: BigNumberish,
    _connectorID: BigNumberish,
    _eventCode: BytesLike,
    _eventData: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  instaList(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    emitEvent(
      _connectorType: BigNumberish,
      _connectorID: BigNumberish,
      _eventCode: BytesLike,
      _eventData: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    instaList(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    "LogEvent(uint64,uint64,uint64,bytes32,bytes)"(
      connectorType?: null,
      connectorID?: BigNumberish | null,
      accountID?: BigNumberish | null,
      eventCode?: BytesLike | null,
      eventData?: null
    ): LogEventEventFilter;
    LogEvent(
      connectorType?: null,
      connectorID?: BigNumberish | null,
      accountID?: BigNumberish | null,
      eventCode?: BytesLike | null,
      eventData?: null
    ): LogEventEventFilter;
  };

  estimateGas: {
    emitEvent(
      _connectorType: BigNumberish,
      _connectorID: BigNumberish,
      _eventCode: BytesLike,
      _eventData: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    instaList(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    emitEvent(
      _connectorType: BigNumberish,
      _connectorID: BigNumberish,
      _eventCode: BytesLike,
      _eventData: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    instaList(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
